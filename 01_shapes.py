# Часть 1.
# Написать функции рисования равносторонних геометрических фигур:
# - треугольника
# - квадрата
# - пятиугольника
# - шестиугольника
# Все функции должны принимать 3 параметра:
# - точка начала рисования
# - угол наклона
# - длина стороны
#
# Использование копи-пасты - обязательно! Даже тем кто уже знает про её пагубность. Для тренировки.
# Как работает копипаста:
#   - одну функцию написали,
#   - копипастим её, меняем название, чуть подправляем код,
#   - копипастим её, меняем название, чуть подправляем код,
#   - и так далее.
# В итоге должен получиться ПОЧТИ одинаковый код в каждой функции

# Пригодятся функции
# sd.get_point()
# sd.get_vector()
# sd.line()
# Результат решения см lesson_004/results/exercise_01_shapes.jpg

import simple_draw as sd


def draw_figure(point=(10, 10), angle=0, length=200, number_of_sides=3):
    start_point = sd.get_point(point[0], point[1])
    for i in range(number_of_sides):
        side = sd.get_vector(start_point=start_point, angle=angle + (360 / number_of_sides) * i, length=length, width=3)
        side.draw()
        start_point = side.end_point


def draw_triange(*args, **kwargs):
    draw_figure(*args, **kwargs, number_of_sides=3)


def draw_square(*args, **kwargs):
    draw_figure(*args, **kwargs, number_of_sides=4)


def draw_pentagon(point=(100, 100), angle=0, length=200):
    draw_figure(point, angle, length, 5)


def draw_hexagon(point=(100, 100), angle=0, length=200):
    start_point = sd.get_point(point[0], point[1])
    for i in range(6):
        side = sd.get_vector(start_point=start_point, angle=angle + (360 / 6) * i, length=length, width=3)
        side.draw()
        start_point = side.end_point


# Часть 1-бис.
# Попробуйте прикинуть обьем работы, если нужно будет внести изменения в этот код.
# Скажем, связывать точки не линиями, а дугами. Или двойными линиями. Или рисовать круги в угловых точках. Или...
# А если таких функций не 4, а 44?

# Часть 2 (делается после зачета первой части)
#
# Надо сформировать функцию, параметризированную в местах где была "небольшая правка".
# Это называется "Выделить общую часть алгоритма в отдельную функцию"
# Потом надо изменить функции рисования конкретных фигур - вызывать общую функцию вместо "почти" одинакового кода.
#
# В итоге должно получиться:
#   - одна общая функция со множеством параметров,
#   - все функции отрисовки треугольника/квадрата/етс берут 3 параметра и внутри себя ВЫЗЫВАЮТ общую функцию.
#
# Не забудте в этой общей функции придумать, как устранить разрыв
#   в начальной/конечной точках рисуемой фигуры (если он есть)

# Часть 2-бис.
# А теперь - сколько надо работы что бы внести изменения в код? Выгода на лицо :)
# Поэтому среди программистов есть принцип D.R.Y. https://clck.ru/GEsA9
# Будьте ленивыми, не используйте копи-пасту!

draw_triange()
draw_triange((150, 150), length=300)
draw_square()
draw_square((450, 150), 45, 80)
draw_pentagon((150, 350), 36, 70)
draw_hexagon((450, 350), 30, 60)

sd.pause()
